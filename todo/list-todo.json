{
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9d5c4504-db56-4c3b-8ccb-00045ff453f8",
              "name": "markdownTable",
              "value": "={{ $json.markdownTable }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1140,
        -40
      ],
      "id": "b91da985-f61b-4312-b12d-3f766599969c",
      "name": "Set Values1"
    },
    {
      "parameters": {
        "jsCode": "// Access incoming data\nconst data = items.map(item => item.json);\n\n// Define the table columns\nconst headers = [\"id\", \"user_name\", \"text\", \"assignee\", \"done\", \"priority\", \"tag\", \"created_at\", \"comment\"];\n\n// Create the header row for Markdown\nlet markdownTable = `| ${headers.join(\" | \")} |\\n`;\nmarkdownTable += `|${headers.map(() => \":---\").join(\"|\")}|\\n`;\n\n// Loop through the array and create rows for the table\ndata.forEach(row => {\n  const tableRow = headers.map(header => row[header] || \"\").join(\" | \");\n  markdownTable += `| ${tableRow} |\\n`;\n});\n\n// Return the Markdown table as output\nreturn [{\n  json: {\n    markdownTable\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1320,
        -40
      ],
      "id": "c5636d9f-536e-4bda-89b1-49dc3b4a8e07",
      "name": "Convert to md table",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "透過 body parameter 的方式，避免使用 json \\n 會直接被 evaluate 導致回傳後 json 格式出錯\n",
        "height": 280,
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -760,
        140
      ],
      "id": "0acb814b-c20f-4cb7-a00f-82cb4592aee8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Webhook').first().json.body.response_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.markdownTable }}"
            },
            {
              "name": "response_type",
              "value": "in_channel"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -640,
        200
      ],
      "id": "2edf6832-ecf4-4f5b-93cf-50023bbc806a",
      "name": "Response to Channel"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2340,
        -40
      ],
      "id": "fc4b334f-986b-424f-87b1-6fedacc73df8",
      "name": "Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "96a4bc1a-f3ea-4f0d-9840-59cf6c49cb53",
              "name": "channel_id",
              "value": "={{ $('Webhook').item.json.body.channel_id }}",
              "type": "string"
            },
            {
              "id": "bda38e30-0520-4d4a-8c4a-5ce11f3b8c06",
              "name": "tag",
              "value": "={{ $json.tag }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1980,
        -40
      ],
      "id": "aba8097d-e061-448a-bc80-0aec68791a25",
      "name": "Set Variable1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3dea5247-0932-432e-93f8-c0eef19629fa",
              "leftValue": "={{ $('Webhook').first().json.body.text }}",
              "rightValue": "--silent",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -920,
        -40
      ],
      "id": "e9efee54-040d-426e-b137-53d4223b2fae",
      "name": "Is Silent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://chat.gss.tw/api/v4/channels/direct",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": ""
            },
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=[\n  \"y4dk4y9x1bbu8f7bkfpenmexow\",\n\"{{ $('Webhook').first().json.body.user_id }}\"\n]",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        -120
      ],
      "id": "6e57f0c0-4d6e-4c17-9d4a-05fa77855687",
      "name": "Create Direct Channel"
    },
    {
      "parameters": {
        "channelId": "={{ $json.id }}",
        "message": "={{ $('Convert to md table').item.json.markdownTable }}",
        "attachments": [],
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.mattermost",
      "typeVersion": 1,
      "position": [
        -400,
        -120
      ],
      "id": "c465852e-7949-4f2e-8a87-2ffdcfdd1757",
      "name": "Mattermost",
      "credentials": {
        "mattermostApi": {
          "id": "QSV4fNtIj04Jhody",
          "name": "Mattermost account 2"
        }
      }
    },
    {
      "parameters": {
        "collection": "todo",
        "options": {},
        "query": "={{ $json.query }}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        -1540,
        -40
      ],
      "id": "23127fa2-5923-465f-b4f0-b725d22b8fb3",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "n2QrVu9KS1tKt3TQ",
          "name": "BizForm Dev"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let text = $('Webhook').first().json.body.text;\nlet query = null;\nlet channel_id = $input.first().json.channel_id;\nlet tag = $input.first().json.tag;\n// Check if text contains \"all\"\nif (text && text.includes(\"all\") && tag) { \n  query = `{\"$and\":[{\"channel_id\": \"${channel_id}\"},{\"tag\":\"${tag}\"}]}`\n}else if (tag) // 只有 tag\n{\n  query = `{\"$and\":[{\"channel_id\": \"${channel_id}\"},{\"done\":\":x:\"},{\"tag\":\"${tag}\"}]}`\n} else if (text.includes(\"all\"))\n{\n    query = `{\"$and\":[{\"channel_id\": \"${channel_id}\"}]}`\n} else {\n  query = `{\"$and\":[{\"channel_id\": \"${channel_id}\"},{\"done\":\":x:\"}]}`\n}\n\n// Return the query object\nreturn {\n  query: query\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1760,
        -40
      ],
      "id": "c9108d24-7454-449d-b027-3834d4470674",
      "name": "Get Query"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.body.text;\n\n// Use a single regex to capture key-value pairs for both long (--key=value) and short (-k=value) options\nconst regex = /-([a-zA-Z0-9_]+)=\"([^\"]*)\"/gu;\n\nlet matches;\nlet tag = null;\n\n// Loop through the matches\nwhile ((matches = regex.exec(input)) !== null) {\n    const key = matches[1] || matches[3]; // Get long option name or short key\n    var value = matches[2] || matches[4]; // Get the associated value\n    value = value.trimEnd()\n    // Assign to the appropriate variable based on the key\n    if (key === 't' || key === 'tag') {\n        tag = value;\n    }\n}\n\n// Return the results\nreturn { tag };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2160,
        -40
      ],
      "id": "ec0585cd-ea02-42fc-ae98-c13b6bdbbf08",
      "name": "Code"
    }
  ],
  "connections": {
    "Set Values1": {
      "main": [
        [
          {
            "node": "Is Silent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to md table": {
      "main": [
        [
          {
            "node": "Set Values1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variable1": {
      "main": [
        [
          {
            "node": "Get Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Silent": {
      "main": [
        [
          {
            "node": "Create Direct Channel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response to Channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Direct Channel": {
      "main": [
        [
          {
            "node": "Mattermost",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Convert to md table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Query": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set Variable1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e6829468b8f56d858129133d295d8fa9bedbd82172869cf86fc48c8e6e82b330"
  }
}