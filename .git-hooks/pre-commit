#!/bin/sh
# Git pre-commit hook to detect and replace sensitive information in "Bearer {token}" format
# Save this file as .git/hooks/pre-commit (without file extension)
# Make sure to run: chmod +x .git/hooks/pre-commit

echo "Checking for Bearer REDACTED_TOKEN"

# Get all files staged for commit
files=$(git diff --cached --name-only --diff-filter=ACM)

# Exit if there are no files to commit
if [ -z "$files" ]; then
    echo "No files to commit."
    exit 0
fi

# Check each file
found_token=0
files_modified=0

for file in $files; do
    # Ensure file exists and is readable
    if [ ! -f "$file" ]; then
        continue
    fi
    
    # Skip obvious binary files
    if [[ "$file" == *.exe || "$file" == *.dll || "$file" == *.zip || "$file" == *.png || "$file" == *.jpg || "$file" == *.jpeg || "$file" == *.gif || "$file" == *.pdf ]]; then
        continue
    fi
    
    # Use grep to search for Bearer REDACTED_TOKEN patterns
    if grep -q -E "Bearer\s+[A-Za-z0-9\-\._~\+\/]+" "$file" 2>/dev/null; then
        echo "Found Bearer REDACTED_TOKEN in $file, replacing with placeholder"
        found_token=1
        
        # Create a temporary file
        temp_file=$(mktemp)
        
        # Replace Bearer REDACTED_TOKEN with placeholder and save to temp file
        sed -E 's/(Bearer\s+)[A-Za-z0-9\-\._~\+\/]+/\1REDACTED_TOKEN/g' "$file" > "$temp_file"
        
        # Copy the temp file back to the original
        cat "$temp_file" > "$file"
        
        # Remove the temp file
        rm "$temp_file"
        
        # Stage the modified file
        git add "$file"
        
        files_modified=$((files_modified + 1))
        
        echo "âœ“ Replaced Bearer REDACTED_TOKEN in $file with 'Bearer REDACTED_TOKEN'"
    fi
done

# If tokens were found, inform but allow the commit to proceed
if [ $found_token -eq 1 ]; then
    echo "Found and replaced Bearer REDACTED_TOKEN in $files_modified file(s)."
    echo "Commit will proceed with the sanitized files."
    echo "Note: If you didn't want to replace these tokens, you can abort with Ctrl+C and restore your files."
    echo "      To restore, use 'git reset HEAD' and then 'git checkout -- <file>' for each modified file."
    # Give the user a moment to abort if needed
    sleep 2
fi

echo "No remaining Bearer REDACTED_TOKEN found, commit proceeding."
exit 0